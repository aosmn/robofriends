{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","email","name","id","className","src","alt","CardList","cardsArray","robots","map","robot","key","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","style","height","children","ErrorBoundary","hasError","info","this","setState","Component","App","onRequestRobots","searchField","isPending","filteredRobots","filter","bot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","result","json","users","err","initialState","robotsInitialState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2dd0c3e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nexport default function Card(props) {\n    const {email, name, id} = props\n  return (\n    <div className=\"tc bg-near-white dib br3 pa3 ma3 grow bw2 shadow-2\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"avatar\"/>\n      <div className=\"\">\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Card from './Card';\n\nexport default function CardList(props) {\n    const {robots} = props;\n    const cardsArray = robots.map(robot => {\n      return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\n    })\n  return (\n    <div className='ma3'>\n      {cardsArray}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function SearchBox(props) {\n  return (\n    <div className=\"pa2\">\n      <input \n        className=\"pa3 ba br2 b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"Search robots\"\n        onChange={props.onSearchChange}\n      />\n\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Scroll(props) {\n  return (\n    <div style={{'overflow-y': 'scroll', height: 'calc(100vh - 216px)'}}>\n      {props.children}\n    </div>\n  );\n}\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n  \n  render() {\n    return this.state.hasError ?\n    <h1> Oooooops. That is not good ! </h1>\n    :\n    this.props.children;\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n  render() {\n    // const {loading, robots} = this.state;    \n    const {searchField, onSearchChange, isPending, robots} = this.props; \n    const filteredRobots = robots.filter(bot => bot.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"tc\">  \n        {\n          !isPending ? \n          <>\n            <h1 className=\"f1\">RoboFriends</h1>\n            <SearchBox onSearchChange={onSearchChange}/>\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots={filteredRobots}/>\n              </ErrorBoundary>\n            </Scroll>\n          </>\n          :\n          <h1>LOADING</h1>\n\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  \n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then((result) => result.json())\n  .then(users => { \n    dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users});\n  })\n  .catch((err) => {\n    // this.setState({loading: false})\n    dispatch({type: REQUEST_ROBOTS_FAILED, payload: err});\n    // throw new Error('Noooooooooooo!');\n  });\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED\n} from './constants';\nconst initialState = {\n  searchField: '',\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {...state, searchField: action.payload};\n\n    default:\n      return state;\n  }\n}\n\nconst robotsInitialState = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=robotsInitialState, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true}\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, isPending: false, robots: action.payload}\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, isPending: false, error: action.payload}\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <ErrorBoundary>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ErrorBoundary>\n  \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}